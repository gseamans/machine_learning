top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
View(top15)
View(top15)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9,(.*]*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ranks
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
View(energy_R)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9]*(.*', '', energy_R$Country)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9]*\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ranks
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9]*', '', energy_R$Country)
energy_R$Country <- gsub('(.*', '', energy_R$Country)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9]*', '', energy_R$Country)
energy_R$Country <- gsub('\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ranks
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
#energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- gsub('[0-9,]*\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
View(energy_R)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
#energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- gsub('[0-9]*\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
#energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- gsub('[0-9]*', '', energy_R$Country)
energy_R$Country <- gsub('\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China Hong Kong Special Administrative Region",
"Bolivia Plurinational State of",
"Iran Islamic Republic of"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong",
"Bolivia",
"Iran"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
View(energy_R)
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
#energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- gsub('[0-9]*', '', energy_R$Country)
energy_R$Country <- gsub('\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China, Hong Kong Special Administrative Region"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
318 - 162
require(xlsx)
require(plyr)
#Turn off scientific notation
options(scipen = 999)
energy_R <- read.xlsx("Energy Indicators.xls", sheetIndex = "Energy",
startRow = 19, endRow = 245, colIndex = c(3,4,5,6),
colClasses = c("character","numeric","numeric","numeric"), header = FALSE, encoding = "UTF-8")
names(energy_R) <- c('Country', 'EnergySupply', 'EnergySupplyperCapita', 'PercentRenewable')
# Remove numbers and parens from Country field
#energy_R$Country <- gsub('[0-9,(,)]*', '', energy_R$Country)
energy_R$Country <- gsub('[0-9]*', '', energy_R$Country)
energy_R$Country <- gsub('\\(.*', '', energy_R$Country)
energy_R$Country <- trimws(energy_R$Country)
energy_R['Country'] <- plyr::mapvalues(energy_R[['Country']],
from = c("Republic of Korea",
"United States of America",
"United Kingdom of Great Britain and Northern Ireland",
"China, Hong Kong Special Administrative Region"),
to = c("South Korea",
"United States",
"United Kingdom",
"Hong Kong"))
GDP_R = read.csv("world_bank.csv", skip = 5, encoding="UTF-8")[,c(1,51:60)]
names(GDP_R) <- c("Country", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015")
GDP_R$Country <- as.character(GDP_R$Country)
GDP_R['Country'] <- plyr::mapvalues(GDP_R[['Country']],
from = c("Korea, Rep.",
"Iran, Islamic Rep.",
"Hong Kong SAR, China"),
to = c("South Korea",
"Iran",
"Hong Kong"))
GDP_R$Country <- trimws((GDP_R$Country))
ScimEn <- read.xlsx("scimagojr-3.xlsx",sheetIndex = 1, encoding="UTF-8")
ScimEn$Country <- as.character(ScimEn$Country)
ScimEn$Country <- trimws(ScimEn$Country)
outer_join <- merge(x = GDP_R, y = energy_R, by = 'Country', all = TRUE)
outer_join <- merge(x = outer_join, y = ScimEn, by = 'Country', all = TRUE)
inner_join <- merge(x = GDP_R, y = energy_R, by = 'Country')
inner_join <- merge(x = inner_join, y = ScimEn, by = 'Country')
# Only keep the top 15 ran
top15 <- inner_join[which(inner_join$Rank < 16),]
top15 <- top15[order(top15$Rank),]
# Convert petajoules to gigajoules
top15$EnergySupply <- lapply(top15$EnergySupply, function(x) {1000000 * x})
update.packages()
update.packages()
update.packages()
setwd("g:/src/brownbags/R/machine_learning/ml2/")
library(prettydoc)
library(ggplot2)
library(ggRandomForests)
library(caret)
library(knitr)
library(rpart)
library(e1071)
library(naivebayes)
#suppressMessages(library(rattle))
library(rattle)
library(randomForest)
set.seed(500)
library('lasso2')
install.packages("lasso2")
library('lasso2')
data('Prostate')
## Load the data
definitions <- read.csv(file = "datadefinitions.csv")
## Load the xtable library for LaTex tables
library(xtable)
## Source the code to create pretty str() tables
source('strtable.R')
## Remove all but the assignment variables from the dataset
prostateSubset <- Prostate[c(2,4,6,7,9)]
print(xtable(strtable(prostateSubset), caption = "Data Types"))
print(xtable(definitions, caption = "Data Descriptions"),
include.rownames = FALSE)
## Print a summary of the data
print(xtable(summary(prostateSubset), caption = "Prostate Subset Summary"),
include.rownames = FALSE)
library(rpart)
library(rpart.plot)
## Now create/grow the tree
## Since lcp is continuous ranging from -1.3863 to 2.9042
## we'll use a control point of 0.0
dt <- rpart(lcp ~ lweight + lbph + gleason + lpsa, data = prostateSubset,
control = rpart.control(cp = 0.0))
## Now print the decision tree
rpart.plot::rpart.plot(dt, type = 4)
print(xtable(printcp(dt)),include.rownames = FALSE)
dt$cptable[which.min(dt$cptable[,"xerror"]),"CP"]
[1] 0
pS1 <- prostateSubset
pS1$lcp <- sapply(pS1$lcp, function(x) if( x > 0) {"Invasive"} else{ if(x <=0)"Non-Invasive"})
pS1$lcp <- as.factor(pS1$lcp)
set.seed(2016)
dtTrain <- sample(1:nrow(pS1), 0.8 * nrow(pS1))
trainDT <- rpart(lcp ~ ., data = pS1[dtTrain,], method = "class")
rpart.plot::rpart.plot(trainDT)
prostatePredict <- predict(trainDT, pS1[-dtTrain,], type = "class")
pTable <- table(prostatePredict, pS1[-dtTrain,]$lcp)
print(xtable(pTable, caption = "Cross Table"))
sum(diag(pTable))/sum(pTable)
[1] 0.85
